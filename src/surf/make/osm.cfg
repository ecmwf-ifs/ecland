# (C) Copyright 2014- ECMWF.
#
# This software is licensed under the terms of the Apache Licence Version 2.0
# which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
# In applying this licence, ECMWF does not waive the privileges and immunities
# granted to it by virtue of its status as an intergovernmental organisation
# nor does it submit to any jurisdiction.
#
# FCM configuration file for Offline Surface Model (OSM)
#
#       Glenn Carver     2014


#  Variables
# Any variables with {?} can be overridden by environment
# variables of the same name.
# $HERE is a special variable that means 'where this file is'.


# Compiler and build environment settings.
$OSM_COMP{?}  = gnu
$OSM_BUILD{?} = opt

# Where the final executables and .o files go
# By default, FCM will create a directory 'build' for all the compiled files in 'dest'
# This can be changed on the command line e.g. fcm make -f osm.cfg dest=mydir/osm
$OSM_DEST{?} = $HERE/../../osm/${OSM_COMP}-${OSM_BUILD}

#  Include the compiler & build configuration
include=$HERE/cfg/${OSM_COMP}-${OSM_BUILD}.cfg

#  Required steps
steps = build

#  Where the compiled files will go
dest = $OSM_DEST

#  What our final executable is called
#  TODO: build the extra executables
build.target = master1s.exe \
               cmfld1s.exe \
               create_grid_info.exe \
               convNetcdf2Grib.exe \
               create_init_clim.exe \
               adjust_forc.exe \
               caldtdz.exe \
               conv_forcing.exe \
               find_points.exe 
               
			   
#  Where all the source code is
build.source = $HERE/../../surf

#  Code directories and files to be ignored (if any)
#  
#  TODO
#   2 copies of yomhook? 
#   2 copies of surip?

build.ns-excl = build make 

#  Ignore any dependency on these modules or includes
#  e.g. typically from external libraries like netcdf.
build.prop{no-dep.include}   = netcdf.inc
#build.prop{no-dep.f.module}  = netcdf grib_api
build.prop{no-dep.f.module}  = netcdf grib_api mpl_module yomhook

#  OSM uses .intfb.h as the interface file suffix
#  FCM will generate these automatically so they should not
#  be present in the source code.
#  Use a .h extension for any interface files that are not
#  to be generated automatically by FCM
build.prop{file-ext.f90-interface} = .intfb.h

#  Compiler properties
#  These are set in the related compiler-build 'included' file above.

build.prop{fc}           = $OSM_FC
build.prop{fc.flags}     = $OSM_FFLAGS -DUseCDF_CMF -DIFS_CMF -Wno-argument-mismatch -ffree-line-length-none
#build.prop{fc.flags}     = $OSM_FFLAGS -DUseCDF_CMF -DIFS_CMF
build.prop{fc.defs}      = $OSM_FCDEFS
build.prop{fc.flags-ld}  = $OSM_LFLAGS


build.prop{fc.include-paths} = ${FAUX_INSTALL_PATH}/libfaux/module/faux
build.prop{fc.lib-paths} = ${FAUX_INSTALL_PATH}/libfaux/lib64
build.prop{fc.libs} = faux

# Explicit dependencies
# If any subroutine is not reference from a USE statement or #include *.intfb.h
# FCM will need to be told explicitly.
# Where possible, better to have this information in the code.

# These interfaces use .h rather than .intfb.h so dependencies need to be added
build.prop{dep.o}[offline/driver/suphec.F90] = susurf.o surf_inq.o
build.prop{dep.o}[offline/driver/callpar1s.F90] = surfbc.o surfrad.o surftstp.o surfws.o
build.prop{dep.o}[offline/driver/vdfmain1s.F90] = surfexcdriver.o surfpp.o
build.prop{dep.o}[offline/driver/vdfdifh1s.F90] = surfseb.o

# vexcs_mod.F90: needs dummy vmass routines.
# nb. dummy vmass fns live in module/ibm.F90. FCM will name the .o file by the first
#     named subroutine. Use fcm's target rename feature to change the .o file if required.
build.prop{dep.o}[module/vexcs_mod.F90] = vdiv.o


